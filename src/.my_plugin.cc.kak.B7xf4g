#include <wayfire/plugin.hpp>
#include <wayfire/view-transform.hpp>

class my_plugin_t : public wf::plugin_interface_t
{
	public:
	    void init() override
	        {
		                  /* Create plugin */
	        }

        void fini() override
            {
                          /* Destroy plugin */
            }
};

DECLARE_WAYFIRE_PLUGIN(my_plugin_t);

class rounded_corners_transformer_t : public wf::view_transformer_t 
{
	public:
		// Every ocurrence of <(void)VARIABLE;> means that that variable will not be used, and this is just done to prevent compiler warnings.
	    uint32_t get_z_order() override
	    {
	        return wf::TRANSFORMER_2D - 1;
	    }

		// Returns an empty region because that is interpreted as transforming the whole window.
		wf::region_t transform_opaque_region(
		    wf::geometry_t box, wf::region_t region) override
		{
		    (void)box;
		    (void)region;
		    return {};
		}

		// There are no actual transformations happening, so the next two functions only need to return the original points.
		wf::pointf_t transform_point(
		    wf::geometry_t view, wf::pointf_t point) override
		{
		    (void)view;
		    return point;
		}

		wf::pointf_t untransform_point(
		    wf::geometry_t view, wf::pointf_t point) override
		{
		    (void)view;
		    return point;
		}

		// Returns the window without any shadows.
		wf::geometry_t get_bounding_box(wf::geometry_t bbox, wlr_box region) override
		{
		    (void)bbox;
		    return wf::geometry_intersection(this->view->get_wm_geometry(), region);
		}
		
		void render_with_damage(wf::texture_t src_tex, wlr_box src_box,
		    const wf::region_t& damage, const wf::framebuffer_t& target_fb) override
		{
		    // TODO
		}

		rounded_corners_transformer_t(wayfire_view view)
		{
		    this->view = view;
		}

	private:
		wayfire_view view;
};
